"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var APIObject = require("./object");

var Input = require("../inputs");

class APIReceipt extends APIObject {
  constructor() {
    var apiToken = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
    super(apiToken, "receipt");
    this.baseUrl = "".concat(this.baseUrl, "/expense_receipts/");
  }
  /**
   * @param {String} file: Receipt filepath (allowed jpg, png, tiff, pdf)
   * @param {String} inputType: String in {'path', 'stream', 'base64'}
   * @param {Boolean} includeWords: extract all words into http_response
   * @param {String} version: expense_receipt api version
   * @param {Boolean} cutPdf: Automatically reconstruct pdf with more than 4 pages
   * @returns {Response} Wrapped response with Receipts objects parsed
   */


  parse(_ref) {
    var _superprop_getParse = () => super.parse,
        _superprop_get_request = () => super._request,
        _this = this;

    return _asyncToGenerator(function* () {
      var {
        input,
        inputType = "path",
        filename = undefined,
        version = "3",
        cutPdf = true,
        includeWords = false
      } = _ref;

      _superprop_getParse().call(_this);

      var inputFile = new Input({
        file: input,
        inputType,
        filename,
        cutPdf
      });
      yield inputFile.init();
      var url = "v".concat(version, "/predict");
      return yield _superprop_get_request().call(_this, url, inputFile, includeWords);
    })();
  }

}

module.exports = APIReceipt;