"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var Response = require("./response");

var errorHandler = require("../errors/handler");

var request = require("./request");
/**
 * Base class for APIs (APIReceipt & APIInvoice)
 *  @param {String} apiToken - Token of the API used for parsing document
 *  @param {String} apiName - Name of the API used for parsing document
 */


class APIObject {
  constructor() {
    var apiToken = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
    var apiName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
    this.apiToken = apiToken;
    this.baseUrl = "https://api.mindee.net/products";
    this.apiName = apiName;
  }
  /**
   */


  parse() {
    if (!this.apiToken) {
      errorHandler.throw({
        error: new Error("Missing API token for ".concat(this.apiName, ".           Have you create a mindee Client with a ").concat(this.apiName, "Token in parameters ?"))
      });
    }
  }
  /** 
    @param {String} url - API url for request
    @param {Input} inputFile - input file for API
    @param {Boolean} includeWords - Include Mindee vision words in Response
    @returns {Response}
  */


  _request(url, inputFile) {
    var _arguments = arguments,
        _this = this;

    return _asyncToGenerator(function* () {
      var includeWords = _arguments.length > 2 && _arguments[2] !== undefined ? _arguments[2] : false;
      var headers = {
        "X-Inferuser-Token": _this.apiToken
      };
      var response = yield request("".concat(_this.baseUrl).concat(url), "POST", headers, inputFile, includeWords);
      return _this.wrapResponse(inputFile, response, _this.apiName);
    })();
  }
  /** 
    @param {String} inputFile - Input object
    @param {} response - HTTP response
    @param {Document} documentType - Document class in {"Receipt", "Invoice", "Financial_document"}
    @returns {Response}
  */


  wrapResponse(inputFile, response, documentType) {
    if (response.statusCode != 200) {
      var errorMessage = JSON.stringify(response.data, null, 4);
      errorHandler.throw(new Error("".concat(this.apiName, " API ").concat(response.statusCode, " HTTP error: ").concat(errorMessage)), false);
      return new Response({
        httpResponse: response,
        documentType: documentType,
        document: undefined,
        input: inputFile,
        error: true
      });
    }

    return new Response({
      httpResponse: response,
      documentType: documentType,
      document: inputFile,
      input: inputFile
    });
  }

}

module.exports = APIObject;