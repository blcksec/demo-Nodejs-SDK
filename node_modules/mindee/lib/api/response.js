"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Document = require("../documents").document;

var Receipt = require("../documents").receipt;

var Invoice = require("../documents").invoice;

var FinancialDocument = require("../documents").financialDocument;

var fs = require("fs").promises;

class Response {
  constructor(_ref) {
    var {
      httpResponse,
      documentType,
      input,
      error,
      reconsctruted = false
    } = _ref,
        args = _objectWithoutProperties(_ref, ["httpResponse", "documentType", "input", "error", "reconsctruted"]);

    this.httpResponse = httpResponse;
    this.documentType = documentType;
    this.input = input;
    if (!error && !reconsctruted) this.formatResponse();

    if (reconsctruted === true) {
      Object.assign(this, args);
    }
  }

  dump(path) {
    var _this = this;

    return _asyncToGenerator(function* () {
      return yield fs.writeFile(path, JSON.stringify(Object.entries(_this)));
    })();
  }

  static load(path) {
    return _asyncToGenerator(function* () {
      var file = fs.readFile(path);
      var args = JSON.parse(file);
      return new Response(_objectSpread({
        reconsctruted: true
      }, args));
    })();
  }

  formatResponse() {
    var constructors = {
      receipt: params => new Receipt(params),
      invoice: params => new Invoice(params),
      financialDocument: params => new FinancialDocument(params)
    };
    var predictions = this.httpResponse.data.predictions.entries();
    this["".concat(this.documentType, "s")] = []; // Create a list of Document (Receipt, Invoice...) for each page of the input document

    for (var [pageNumber, prediction] of predictions) {
      this["".concat(this.documentType, "s")].push(constructors[this.documentType]({
        apiPrediction: prediction,
        inputFile: this.input,
        pageNumber: pageNumber
      }));
    } // Merge the list of Document into a unique Document


    this[this.documentType] = Document.mergePages(this["".concat(this.documentType, "s")]);
  }

}

module.exports = Response;