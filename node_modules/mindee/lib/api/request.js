"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var https = require("https");

var {
  version: sdkVersion
} = require("../../package.json");

var {
  URL
} = require("url");

var FormData = require("form-data");

var request = function request(url, method, headers, input) {
  var includeWords = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  return new Promise(function (resolve, reject) {
    var form = new FormData();
    var body;
    headers["User-Agent"] = "mindee-node/".concat(sdkVersion, " node/").concat(process.version);

    if (["path", "stream"].includes(input.inputType)) {
      var fileParams = {
        filename: input.filename
      };
      form.append("file", input.fileObject, fileParams);
      if (includeWords) form.append("include_mvision", "true");
      headers = _objectSpread(_objectSpread({}, headers), form.getHeaders());
    } else if (input.inputType === "base64") {
      var body_obj = {
        file: input.fileObject
      };
      if (includeWords) body_obj["include_mvision"] = "true";
      body = JSON.stringify(body_obj);
      headers["Content-Type"] = "application/json";
      headers["Content-Length"] = body.length;
    }

    var uri = new URL(url);
    var options = {
      method: method,
      headers: headers,
      hostname: uri.hostname,
      path: "".concat(uri.pathname).concat(uri.search)
    };
    var req = https.request(options, function (res) {
      var responseBody = [];
      res.on("data", function (chunk) {
        responseBody += chunk;
      });
      res.on("end", function () {
        resolve(_objectSpread(_objectSpread({}, res), {}, {
          data: JSON.parse(responseBody)
        }));
      });
    });
    req.on("error", err => {
      reject(err);
    });

    if (["path", "stream"].includes(input.inputType)) {
      form.pipe(req);
    }

    if (input.inputType === "base64") {
      req.write(body);
      req.end();
    }
  });
};

module.exports = request;