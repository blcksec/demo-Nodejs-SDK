"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var fs = require("fs").promises;

class Document {
  /**
   * Takes a list of Documents and return one Document where
   * each field is set with the maximum probability field
   * @param {Input} inputFile - input file given to parse the document
   */
  constructor() {
    var inputFile = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
    this.filepath = undefined;
    this.filename = undefined;
    this.fileExtension = undefined;

    if (inputFile != undefined) {
      this.filepath = inputFile.filepath;
      this.filename = inputFile.filename;
      this.fileExtension = inputFile.fileExtension;
    }

    this.checklist = {};
  }

  clone() {
    return JSON.parse(JSON.stringify(this));
  }
  /** return true if all checklist of the document if true */


  checkAll() {
    return this.checklist.every(item => item == true);
  }
  /** Export document into a JSON file */


  dump(path) {
    var _this = this;

    return _asyncToGenerator(function* () {
      return yield fs.writeFile(path, JSON.stringify(Object.entries(_this)));
    })();
  }
  /** Create a Document from a JSON file */


  static load(path) {
    return _asyncToGenerator(function* () {
      var file = fs.readFile(path);
      var args = JSON.parse(file);
      return new Document(_objectSpread({
        reconsctruted: true
      }, args));
    })();
  }
  /**
   * Takes a list of Documents and return one Document where
   * each field is set with the maximum probability field
   * @param {Array<Document>} documents - A list of Documents
   */


  static mergePages(documents) {
    var finalDocument = documents[0].clone();
    var attributes = Object.getOwnPropertyNames(finalDocument);

    for (var document of documents) {
      for (var attribute of attributes) {
        var _document$attribute;

        if ((document === null || document === void 0 ? void 0 : (_document$attribute = document[attribute]) === null || _document$attribute === void 0 ? void 0 : _document$attribute.probability) > finalDocument[attribute].probability) {
          finalDocument[attribute] = document === null || document === void 0 ? void 0 : document[attribute];
        }
      }
    }

    return finalDocument;
  }

}

module.exports = Document;