"use strict";

function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }

var Field = require("./field");

var _setKey = new WeakSet();

class PaymentDetails extends Field {
  /**
   * @param {Object} prediction - Prediction object from HTTP response
   * @param {String} valueKey - Key to use in the prediction dict to get the iban
   * @param {String} accountNumberKey - Key to use to get the account number in the prediction dict
   * @param {String} ibanKey - Key to use to get the IBAN in the prediction dict
   * @param {String} routingNumberKey - Key to use to get the routing number in the prediction dict
   * @param {String} swiftKey - Key to use to get the SWIFT in the prediction dict
   * @param {Boolean} reconstructed - Does the object is reconstructed (not extracted by the API)
   * @param {Integer} pageNumber - Page number for multi pages pdf
   */
  constructor(_ref) {
    var {
      prediction,
      valueKey = "iban",
      accountNumberKey = "account_number",
      ibanKey = "iban",
      routingNumberKey = "routing_number",
      swiftKey = "swift",
      reconstructed = false,
      pageNumber = 0
    } = _ref;
    super({
      prediction,
      valueKey,
      reconstructed,
      pageNumber
    });

    _setKey.add(this);

    this.accountNumber = undefined;
    this.iban = undefined;
    this.routingNumber = undefined;
    this.swift = undefined;

    _classPrivateMethodGet(this, _setKey, _setKey2).call(this, prediction[accountNumberKey], "accountNumber");

    _classPrivateMethodGet(this, _setKey, _setKey2).call(this, prediction[ibanKey], "iban");

    _classPrivateMethodGet(this, _setKey, _setKey2).call(this, prediction[routingNumberKey], "routingNumber");

    _classPrivateMethodGet(this, _setKey, _setKey2).call(this, prediction[swiftKey], "swift");
  }

  toString() {
    var str = "";
    var keys = ["accountNumber", "iban", "routingNumber", "swift"];

    for (var key of keys) {
      if (this[key]) str += "".concat(this[key], "; ");
    }

    return str;
  }

}

var _setKey2 = function _setKey2(value, key) {
  if (typeof value === "string" && value !== "N/A") this[key] = value;else this[key] = undefined;
};

module.exports = PaymentDetails;