"use strict";

var Field = require("./field");

class Tax extends Field {
  /**
   * @param {Object} prediction - Prediction object from HTTP response
   * @param {String} valueKey - Key to use in the prediction dict to get the tax value
   * @param {String} rateKey - Key to use to get the tax rate in the prediction dict
   * @param {String} codeKey - Key to use to get the tax code in the prediction dict
   * @param {Boolean} reconstructed - Does the object is reconstructed (not extracted by the API)
   * @param {Integer} pageNumber - Page number for multi pages pdf
   */
  constructor(_ref) {
    var _prediction$codeKey;

    var {
      prediction,
      valueKey = "value",
      rateKey = "rate",
      codeKey = "code",
      reconstructed = false,
      pageNumber = 0
    } = _ref;
    super({
      prediction,
      valueKey,
      reconstructed,
      pageNumber
    });
    this.rate = parseFloat(prediction[rateKey]);
    if (isNaN(this.rate)) this.rate = undefined;
    this.code = (_prediction$codeKey = prediction[codeKey]) === null || _prediction$codeKey === void 0 ? void 0 : _prediction$codeKey.toString();
    if (this.code === "N/A") this.code = undefined;
    this.value = parseFloat(prediction[valueKey]);

    if (isNaN(this.value)) {
      this.value = undefined;
      this.probability = 0.0;
    }
  }

  toString() {
    var str = "";
    var keys = ["value", "rate", "code"];

    for (var [i, key] of keys.entries()) {
      var value = this[key] === undefined ? "_" : this[key].toString();
      if (i < keys.length - 1) str += "".concat(value).concat(key === "rate" ? "%" : "", "; ");else str += value;
    }

    return str;
  }

}

module.exports = Tax;