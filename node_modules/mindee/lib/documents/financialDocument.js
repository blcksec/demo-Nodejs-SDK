"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }

var Document = require("./document");

var Invoice = require("./invoice");

var Receipt = require("./receipt");

var Field = require("./fields").field;

var Date = require("./fields").date;

var Amount = require("./fields").amount;

var Locale = require("./fields").locale;

var Orientation = require("./fields").orientation;

var Tax = require("./fields").tax;

var _initFromScratch = new WeakSet();

var _initFromApiPrediction = new WeakSet();

var _checklist = new WeakSet();

var _taxesMatchTotalIncl = new WeakSet();

class FinancialDocument extends Document {
  /**
   *  @param {Object} apiPrediction - Json parsed prediction from HTTP response
   *  @param {Input} input - Input object
   *  @param {Integer} pageNumber - Page number for multi pages pdf input
   *  @param {Object} locale - locale value for creating FinancialDocument object from scratch
   *  @param {Object} totalIncl - total tax included value for creating FinancialDocument object from scratch
   *  @param {Object} totalExcl - total tax excluded value for creating FinancialDocument object from scratch
   *  @param {Object} Date - date value for creating FinancialDocument object from scratch
   *  @param {Object} InvoiceNumber - Invoice number value for creating FinancialDocument object from scratch
   *  @param {Object} taxes - taxes value for creating FinancialDocument object from scratch
   *  @param {Object} merchantName - merchant name value for creating FinancialDocument object from scratch
   *  @param {Object} paymentDetails - payment details value for creating FinancialDocument object from scratch
   *  @param {Object} companyNumber - company number value for creating FinancialDocument object from scratch
   *  @param {Object} vatNumber - vat number value for creating FinancialDocument object from scratch
   *  @param {Object} orientation - orientation value for creating FinancialDocument object from scratch
   *  @param {Object} totalTax - total tax value for creating FinancialDocument object from scratch
   *  @param {Object} time - time value for creating FinancialDocument object from scratch
   *  @param {Object} pageNumber - pageNumber for multi pages pdf input
   */
  constructor(_ref) {
    var {
      apiPrediction: _apiPrediction = undefined,
      inputFile: _inputFile = undefined,
      locale: _locale = undefined,
      totalIncl: _totalIncl = undefined,
      totalExcl: _totalExcl = undefined,
      date: _date = undefined,
      invoiceNumber: _invoiceNumber = undefined,
      dueDate: _dueDate = undefined,
      taxes: _taxes = undefined,
      merchantName: _merchantName = undefined,
      paymentDetails: _paymentDetails = undefined,
      companyNumber: _companyNumber = undefined,
      vatNumber: _vatNumber = undefined,
      orientation: _orientation = undefined,
      totalTax: _totalTax = undefined,
      time: _time = undefined,
      pageNumber: _pageNumber = 0
    } = _ref;
    super(_inputFile);

    _taxesMatchTotalIncl.add(this);

    _checklist.add(this);

    _initFromApiPrediction.add(this);

    _initFromScratch.add(this);

    if (_apiPrediction === undefined) {
      _classPrivateMethodGet(this, _initFromScratch, _initFromScratch2).call(this, {
        locale: _locale,
        totalIncl: _totalIncl,
        totalExcl: _totalExcl,
        date: _date,
        invoiceNumber: _invoiceNumber,
        dueDate: _dueDate,
        taxes: _taxes,
        merchantName: _merchantName,
        paymentDetails: _paymentDetails,
        companyNumber: _companyNumber,
        vatNumber: _vatNumber,
        orientation: _orientation,
        pageNumber: _pageNumber,
        totalTax: _totalTax,
        time: _time
      });
    } else {
      _classPrivateMethodGet(this, _initFromApiPrediction, _initFromApiPrediction2).call(this, _apiPrediction, _inputFile, _pageNumber);
    }

    _classPrivateMethodGet(this, _checklist, _checklist2).call(this);
  }

  toString() {
    return "\n    -----Financial document-----\n    Filename: ".concat(this.filename, "\n    Total amount: ").concat(this.totalIncl.value, "\n    Date: ").concat(this.date.value, "\n    Merchant name: ").concat(this.merchantName.value, "\n    Total taxes: ").concat(this.totalTax.value, "\n    ");
  }

}

var _initFromScratch2 = function _initFromScratch2(_ref2) {
  var {
    locale,
    totalIncl,
    totalExcl,
    totalTax,
    date,
    invoiceNumber,
    dueDate,
    taxes,
    paymentDetails,
    companyNumber,
    vatNumber,
    orientation,
    pageNumber,
    merchantName,
    time
  } = _ref2;

  var constructPrediction = function constructPrediction(item) {
    return {
      prediction: {
        value: item
      },
      valueKey: "value",
      pageNumber
    };
  };

  this.locale = new Locale(constructPrediction(locale));
  this.totalIncl = new Amount(constructPrediction(totalIncl));
  this.totalExcl = new Amount(constructPrediction(totalExcl));
  this.totalTax = new Amount(constructPrediction(totalTax));
  this.date = new Date(constructPrediction(date));
  this.dueDate = new Date(constructPrediction(dueDate));
  this.merchantName = new Field(constructPrediction(merchantName));
  this.time = new Field(constructPrediction(time));
  this.orientation = new Orientation(constructPrediction(orientation));
  this.invoiceNumber = new Field(constructPrediction(invoiceNumber));
  this.paymentDetails = new Field(constructPrediction(paymentDetails));
  this.companyNumber = new Field(constructPrediction(companyNumber));
  this.vatNumber = new Field(constructPrediction(vatNumber));

  if (taxes !== undefined) {
    this.taxes = [];

    for (var t of taxes) {
      this.taxes.push(new Tax({
        prediction: {
          value: t[0],
          rate: t[1]
        },
        pageNumber,
        valueKey: "value",
        rateKey: "rate"
      }));
    }
  }
};

var _initFromApiPrediction2 = function _initFromApiPrediction2(apiPrediction, inputFile, pageNumber) {
  if (Object.keys(apiPrediction).includes("invoice_number")) {
    var invoice = new Invoice({
      apiPrediction,
      inputFile,
      pageNumber
    });
    Object.assign(this, invoice);
    this.time = new Field({
      prediction: {
        value: undefined,
        probability: 0.0
      }
    });
    this.merchantName = new Field({
      prediction: {
        value: undefined,
        probability: 0.0
      }
    });
  } else {
    var receipt = new Receipt({
      apiPrediction,
      inputFile,
      pageNumber
    });
    Object.assign(this, receipt);
    this.invoiceDate = new Field({
      prediction: {
        value: undefined,
        probability: 0.0
      }
    });
    this.invoiceNumber = new Field({
      prediction: {
        value: undefined,
        probability: 0.0
      }
    });
    this.dueDate = new Field({
      prediction: {
        value: undefined,
        probability: 0.0
      }
    });
    this.paymentDetails = new Field({
      prediction: {
        value: undefined,
        probability: 0.0
      }
    });
    this.companyNumber = new Field({
      prediction: {
        value: undefined,
        probability: 0.0
      }
    });
  }
};

var _checklist2 = function _checklist2() {
  this.checklist = {
    taxesMatchTotalIncl: _classPrivateMethodGet(this, _taxesMatchTotalIncl, _taxesMatchTotalIncl2).call(this)
  };
};

var _taxesMatchTotalIncl2 = function _taxesMatchTotalIncl2() {
  // Check taxes and total include exist
  if (this.taxes.length === 0 || this.totalIncl.value === undefined) return false; // Reconstruct totalIncl from taxes

  var totalVat = 0;
  var reconstructedTotal = 0;
  this.taxes.forEach(tax => {
    if (tax.value === undefined || !tax.rate) return false;
    totalVat += tax.value;
    reconstructedTotal += tax.value + 100 * tax.value / tax.rate;
  }); // Sanity check

  if (totalVat <= 0) return false; // Crate epsilon

  var eps = 1 / (100 * totalVat);

  if (this.totalIncl.value * (1 - eps) - 0.02 <= reconstructedTotal && reconstructedTotal <= this.totalIncl.value * (1 + eps) + 0.02) {
    this.taxes = this.taxes.map(tax => _objectSpread(_objectSpread({}, tax), {}, {
      probability: 1.0
    }));
    this.totalTax.probability = 1.0;
    this.totalIncl.probability = 1.0;
    return true;
  }

  return false;
};

module.exports = FinancialDocument;